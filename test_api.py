"""
Test script to understand the API format of the humanize_text endpoint
"""
import requests
import json
import logging

logging.basicConfig(level=logging.INFO)

# API endpoint
API_URL = "https://web-production-3db6c.up.railway.app/humanize_text"

def test_format_1():
    """Test with basic JSON payload"""
    payload = {
        "text": "This is a test sentence generated by an AI to check the API functionality."
    }
    
    try:
        response = requests.post(API_URL, json=payload)
        logging.info(f"Status code: {response.status_code}")
        logging.info(f"Response headers: {response.headers}")
        logging.info(f"Response content: {response.text}")
        
        if response.status_code == 200:
            try:
                json_response = response.json()
                logging.info(f"Parsed JSON: {json.dumps(json_response, indent=2)}")
            except:
                logging.info("Response is not JSON")
    except Exception as e:
        logging.error(f"Error: {str(e)}")

def test_format_2():
    """Test with form data payload"""
    payload = {"text": "This is a test sentence generated by an AI to check the API functionality."}
    
    try:
        response = requests.post(API_URL, data=payload)
        logging.info(f"Status code: {response.status_code}")
        logging.info(f"Response headers: {response.headers}")
        logging.info(f"Response content: {response.text}")
        
        if response.status_code == 200:
            try:
                json_response = response.json()
                logging.info(f"Parsed JSON: {json.dumps(json_response, indent=2)}")
            except:
                logging.info("Response is not JSON")
    except Exception as e:
        logging.error(f"Error: {str(e)}")

def test_format_3():
    """Test with text payload"""
    text = "This is a test sentence generated by an AI to check the API functionality."
    headers = {'Content-Type': 'text/plain'}
    
    try:
        response = requests.post(API_URL, data=text, headers=headers)
        logging.info(f"Status code: {response.status_code}")
        logging.info(f"Response headers: {response.headers}")
        logging.info(f"Response content: {response.text}")
        
        if response.status_code == 200:
            try:
                json_response = response.json()
                logging.info(f"Parsed JSON: {json.dumps(json_response, indent=2)}")
            except:
                logging.info("Response is not JSON")
    except Exception as e:
        logging.error(f"Error: {str(e)}")

def test_with_params():
    """Test with URL parameters"""
    params = {"text": "This is a test sentence generated by an AI to check the API functionality."}
    
    try:
        response = requests.get(API_URL, params=params)
        logging.info(f"Status code: {response.status_code}")
        logging.info(f"Response headers: {response.headers}")
        logging.info(f"Response content: {response.text}")
        
        if response.status_code == 200:
            try:
                json_response = response.json()
                logging.info(f"Parsed JSON: {json.dumps(json_response, indent=2)}")
            except:
                logging.info("Response is not JSON")
    except Exception as e:
        logging.error(f"Error: {str(e)}")

def test_variation():
    """Test with options in the payload"""
    payload = {
        "text": "This is a test sentence generated by an AI to check the API functionality.",
        "options": {
            "complexity": "medium",
            "tone": "casual",
            "length": "maintain"
        }
    }
    
    try:
        response = requests.post(API_URL, json=payload)
        logging.info(f"Status code: {response.status_code}")
        logging.info(f"Response headers: {response.headers}")
        logging.info(f"Response content: {response.text}")
        
        if response.status_code == 200:
            try:
                json_response = response.json()
                logging.info(f"Parsed JSON: {json.dumps(json_response, indent=2)}")
            except:
                logging.info("Response is not JSON")
    except Exception as e:
        logging.error(f"Error: {str(e)}")

if __name__ == "__main__":
    logging.info("Testing format 1: JSON payload")
    test_format_1()
    
    logging.info("\nTesting format 2: Form data")
    test_format_2()
    
    logging.info("\nTesting format 3: Plain text")
    test_format_3()
    
    logging.info("\nTesting with URL parameters")
    test_with_params()
    
    logging.info("\nTesting with options")
    test_variation()
