"""
Advanced API Format Tester
Tests multiple formats to determine exactly what the API expects
"""
import requests
import json
import logging
import time

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

API_URL = "https://web-production-3db6c.up.railway.app/humanize_text"
TEST_TEXT = "This is a test sentence generated by an AI to check the API functionality."

def log_response(response, test_name):
    """Log the response details"""
    logger.info(f"\n--- {test_name} ---")
    logger.info(f"Status code: {response.status_code}")
    logger.info(f"Headers: {dict(response.headers)}")
    
    # Log response content
    try:
        content_type = response.headers.get('Content-Type', '')
        if 'application/json' in content_type:
            logger.info(f"Response JSON: {json.dumps(response.json(), indent=2)}")
        else:
            logger.info(f"Response text: {response.text[:500]}")
    except:
        logger.info(f"Response text: {response.text[:500]}")
    
    logger.info(f"Response time: {response.elapsed.total_seconds():.2f}s")
    logger.info("-" * 50)

def test_all_formats():
    """Test all possible formats and combinations"""
    
    # Test 1: Simple JSON with 'text' key
    try:
        logger.info("\nTEST 1: Simple JSON with 'text' key")
        payload = {"text": TEST_TEXT}
        headers = {'Content-Type': 'application/json'}
        response = requests.post(API_URL, json=payload, headers=headers)
        log_response(response, "Simple JSON")
    except Exception as e:
        logger.error(f"Error in test 1: {str(e)}")
    
    # Test 2: Form data (x-www-form-urlencoded)
    try:
        logger.info("\nTEST 2: Form data (x-www-form-urlencoded)")
        payload = {"text": TEST_TEXT}
        headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        response = requests.post(API_URL, data=payload, headers=headers)
        log_response(response, "Form Data")
    except Exception as e:
        logger.error(f"Error in test 2: {str(e)}")
    
    # Test 3: Plain text in request body
    try:
        logger.info("\nTEST 3: Plain text in request body")
        headers = {'Content-Type': 'text/plain'}
        response = requests.post(API_URL, data=TEST_TEXT, headers=headers)
        log_response(response, "Plain Text")
    except Exception as e:
        logger.error(f"Error in test 3: {str(e)}")
    
    # Test 4: Query parameter (GET request)
    try:
        logger.info("\nTEST 4: Query parameter (GET request)")
        params = {"text": TEST_TEXT}
        response = requests.get(API_URL, params=params)
        log_response(response, "Query Params (GET)")
    except Exception as e:
        logger.error(f"Error in test 4: {str(e)}")
    
    # Test 5: Query parameter (POST request)
    try:
        logger.info("\nTEST 5: Query parameter (POST request)")
        params = {"text": TEST_TEXT}
        response = requests.post(API_URL, params=params)
        log_response(response, "Query Params (POST)")
    except Exception as e:
        logger.error(f"Error in test 5: {str(e)}")
    
    # Test 6: JSON with different key names
    try:
        logger.info("\nTEST 6: JSON with different key names")
        possible_keys = ["text", "input", "content", "original_text", "source_text", "message"]
        
        for key in possible_keys:
            payload = {key: TEST_TEXT}
            headers = {'Content-Type': 'application/json'}
            response = requests.post(API_URL, json=payload, headers=headers)
            log_response(response, f"JSON with '{key}' key")
            time.sleep(0.5)  # Small delay to avoid rate limiting
    except Exception as e:
        logger.error(f"Error in test 6: {str(e)}")
    
    # Test 7: JSON with additional options
    try:
        logger.info("\nTEST 7: JSON with additional options")
        payload = {
            "text": TEST_TEXT,
            "options": {
                "style": "casual",
                "format": "paragraph"
            }
        }
        headers = {'Content-Type': 'application/json'}
        response = requests.post(API_URL, json=payload, headers=headers)
        log_response(response, "JSON with options")
    except Exception as e:
        logger.error(f"Error in test 7: {str(e)}")
    
    # Test 8: Multipart form data with file
    try:
        logger.info("\nTEST 8: Multipart form data with file")
        files = {'text': ('text.txt', TEST_TEXT, 'text/plain')}
        response = requests.post(API_URL, files=files)
        log_response(response, "Multipart Form")
    except Exception as e:
        logger.error(f"Error in test 8: {str(e)}")

if __name__ == "__main__":
    logger.info(f"Testing API endpoint: {API_URL}")
    test_all_formats()
    logger.info("All tests completed!")
